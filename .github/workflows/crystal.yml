name: Crystal CI

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest

    container:
      image: crystallang/crystal

    steps:
      - name: install node.js
        run: |
          apt update && apt install -y curl zstd
          curl -sL https://deb.nodesource.com/setup_14.x | bash -
          apt install -y nodejs
      - uses: actions/checkout@v1
      - name: Install dependencies
        run: shards install
      - name: Run tests
        run: crystal spec
      - name: Bulid
        run: make build
      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-build-bin
        with:
          path: ./
          key: ${{github.sha}}

  docker-test:
    name: test by docker container
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-16.04, ubuntu-18.04, ubuntu-20.04]
        command: 
          - apt
          - get
          - git

    steps:
      - name: install node.js
        run: |
          apt update && apt install -y curl zstd
          curl -sL https://deb.nodesource.com/setup_14.x | bash -
          apt install -y nodejs

      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-build-bin
        with:
          path: ./
          key: ${{github.sha}}
      - name: chmod +x
        run: chmod +x bin/swpro
      - name: ${{matrix.command}} on docker test
        run: make -c spec/docker-test/${{matrix.command}} test

  release:
    name: release result
    needs: docker-test
    runs-on: ubuntu-latest
    steps:
      - name: install node.js
        run: |
          apt update && apt install -y curl zstd 
          curl -sL https://deb.nodesource.com/setup_14.x | bash -
          apt install -y nodejs
      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-build-bin
        with:
          path: ./
          key: ${{github.sha}}
      - name: chmod +x
        run: chmod +x bin/swpro
      - name: Zip
        run: zip -r swpro.zip .
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v0.1.0
          release_name: Release ${{ github.ref }}
          draft: true
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./swpro.zip
          asset_name: swpro.zip
          asset_content_type: application/zip
